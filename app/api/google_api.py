# import os
# from dotenv import load_dotenv
# from google import genai
# from google.genai import types

# load_dotenv()

# client = genai.Client(api_key=os.getenv("GEMINI_API_KEY"))

# for chunk in client.models.generate_content_stream(
#     model="gemini-2.0-pro-exp-02-05",
#     contents="Tell me a story in 300 words.",
#     config=types.GenerateContentConfig(
#         system_instruction="You are an AI assistant that strictly follows the context provided to answer question. Don't bring any outside information outside of the context provided.",
#         temperature=0,
#         response_mime_type="application/json",
#         stop_sequences=["\n"],
#         seed=42,
#     ),
# ):
#     print(chunk.text)

import os
from dotenv import load_dotenv
from google import genai
from google.genai import types

load_dotenv()

client = genai.Client(api_key=os.getenv("GEMINI_API_KEY"))


async def generate_google(query: str, context: str, model: str):
    """
    Generates content by streaming the response from the Gemini API.

    Args:
        query (str): The user query.
        context (str, optional): Context information to assist the generation.
        model (str, optional): Model to use for generation.

    Yields:
        str: Chunks of text generated by the API.
    """
    if context is None:
        context = ""

    system_instruction = (
        "you are an AI assistant that strictly follows the context provided to answer question. "
        "Don't bring any outside information outside of the context provided."
    )

    contents = [context, query]

    config = types.GenerateContentConfig(
        system_instruction=system_instruction,
        temperature=0.1,
        seed=42,
    )

    # try:
    #     for chunk in client.models.generate_content_stream(
    #         model=model,
    #         contents=contents,
    #         config=config,
    #     ):
    #         yield chunk.text
    # except Exception as e:
    #     yield f"An error occurred: {e}"

    response = client.models.generate_content(
        model=model,
        contents=contents,
        config=config,
    )
    return response.candidates[0].content.parts[0].text
